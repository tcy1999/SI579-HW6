{"version":3,"sources":["utils.js","outputItem.js","App.js","index.js"],"names":["groupBy","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","result","Array","from","keys","sort","key","addS","num","OutputItem","props","word","type","className","onClick","onSave","App","inputEl","useRef","useState","description","setDescription","saved","setSaved","output","setOutput","saveWords","oldSaved","concat","fetchList","a","target","fetchUrl","current","value","fetch","response","json","length","groupbyResult","groupbyOut","parseInt","map","item","i","href","join","placeholder","onKeyDown","event","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d0dc51c.chunk.js","sourcesContent":["export function groupBy(objects, property) {\r\n    if(typeof property !== 'function') {\r\n        const propName = property;\r\n        property = (obj) => obj[propName];\r\n    }\r\n\r\n    const groupedObjects = new Map(); \r\n    for(const object of objects) {\r\n        const groupName = property(object);\r\n        if(!groupedObjects.has(groupName)) {\r\n            groupedObjects.set(groupName, []);\r\n        }\r\n        groupedObjects.get(groupName).push(object);\r\n    }\r\n\r\n    const result = {};\r\n    for(const key of Array.from(groupedObjects.keys()).sort()) {\r\n        result[key] = groupedObjects.get(key);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function addS(num) {\r\n    if(num === 1) {\r\n        return '';\r\n    } else {\r\n        return 's';\r\n    }\r\n}\r\n","export default function OutputItem(props){\r\n    return (<li>{props.word} <button type='button' \r\n    className='btn btn-outline-success' onClick={props.onSave}>(save)</button></li>)\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useRef, useState } from 'react';\r\nimport { addS, groupBy } from './utils';\r\nimport OutputItem from './outputItem';\r\n\r\nfunction App() {\r\n  const inputEl = useRef(null);\r\n  const [description, setDescription] = useState('');\r\n  const [saved, setSaved] = useState([]);\r\n  const [output, setOutput] = useState('');\r\n\r\n  function saveWords(word){\r\n    setSaved(oldSaved => oldSaved.concat(word));\r\n  }\r\n\r\n  async function fetchList(target='rhyme'){\r\n    let fetchUrl = 'https://api.datamuse.com/words?rel_rhy=' + inputEl.current.value;\r\n\r\n    if(target === 'rhyme'){\r\n      setDescription(`Words that rhyme with ${inputEl.current.value}`);\r\n    } else {\r\n      setDescription(`Words with a similar meaning to ${inputEl.current.value}`);\r\n      fetchUrl = 'https://api.datamuse.com/words?ml=' + inputEl.current.value;\r\n    }\r\n    setOutput(<span>loading...</span>);\r\n\r\n    const response = await fetch(fetchUrl);\r\n    const result = await response.json();\r\n\r\n    setOutput('');\r\n    if(result.length){\r\n      if(target === 'rhyme'){\r\n        const groupbyResult = groupBy(result, 'numSyllables');\r\n        const groupbyOut = []\r\n        for(const key in groupbyResult){\r\n            groupbyOut.push(<h3 key={key}>{`${key} syllable${addS(parseInt(key))}:`}</h3>);\r\n            groupbyOut.push(groupbyResult[key].map((item, i) => <OutputItem onSave={() => saveWords(item.word)} \r\n            key={i} word={item.word} /> ))\r\n        }\r\n        setOutput(groupbyOut);\r\n      } else {\r\n        setOutput(result.map((item, i) => <OutputItem onSave={() => saveWords(item.word)} \r\n        key={i} word={item.word} /> ));\r\n      }\r\n    } else {\r\n      setOutput(<span>(no result)</span>);\r\n    }\r\n  }\r\n\r\n  function onKeydown(event) {\r\n    if(event.key === 'Enter') {\r\n        fetchList();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <main className=\"container\">\r\n        <h1 className=\"row\">React Rhyme Finder (579 Problem Set 6)</h1>\r\n        <div className=\"row\">\r\n            <div className=\"col\"><a href='https://github.com/tcy1999/SI579-HW6/tree/main'>Source code</a></div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div className=\"col\">Saved words: <span>{saved.length ? saved.join(', ') : '(none)'}</span></div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div className=\"input-group col\">\r\n                <input className=\"form-control\" type=\"text\" placeholder=\"Enter a word\" onKeyDown={onKeydown} \r\n                ref={inputEl}/>\r\n                <button type=\"button\" className=\"btn btn-primary\" \r\n                onClick={() => fetchList()}>Show rhyming words</button>\r\n                <button type=\"button\" className=\"btn btn-secondary\" \r\n                onClick={() => fetchList('synonym')}>Show synonyms</button>\r\n            </div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <h2 className=\"col\">{description}</h2>\r\n        </div>\r\n        <div className=\"output row\">\r\n            <output className=\"col\">{output}</output>\r\n        </div>\r\n    </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}